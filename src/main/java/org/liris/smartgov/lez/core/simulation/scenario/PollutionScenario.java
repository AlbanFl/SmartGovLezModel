package org.liris.smartgov.lez.core.simulation.scenario;

import java.util.Random;

import org.liris.smartgov.lez.core.copert.tableParser.CopertParser;
import org.liris.smartgov.lez.core.environment.graph.PollutableOsmArcFactory;
import org.liris.smartgov.lez.core.environment.lez.Lez;
import org.liris.smartgov.simulator.core.agent.core.Agent;
import org.liris.smartgov.simulator.core.environment.SmartGovContext;
import org.liris.smartgov.simulator.urban.osm.environment.graph.OsmNode;
import org.liris.smartgov.simulator.urban.osm.environment.graph.Road;
import org.liris.smartgov.simulator.urban.osm.scenario.GenericOsmScenario;

/**
 * Generic scenario used to load OSM data in "pollutable" osm arcs.
 *
 */
public abstract class PollutionScenario extends GenericOsmScenario<OsmNode, Road> {
	
	/**
	 * A random instance used by the CopertParser to generate fleets, generated by
	 * default from a fixed seed : 240720191835
	 */
	public static Random random = new Random(240720191835l);
	
	private Lez lez;
	private CopertParser copertParser;
	
	/**
	 * PollutionScenario constructor.
	 * 
	 * @param lez LEZ to consider in this scenario
	 */
	public PollutionScenario(Lez lez) {
		super(OsmNode.class, Road.class, new PollutableOsmArcFactory(lez));
		this.lez = lez;
	}
	
	/**
	 * PollutionScenario constructor for scenarios
	 * without LEZ.
	 * 
	 */
	public PollutionScenario() {
		this(Lez.none());
	}
	
	/**
	 * Returns the current LEZ used in this scenario.
	 * 
	 * @return current LEZ
	 */
	public Lez getLez() {
		return lez;
	}
	
	/**
	 * Loads a CopertParser instance from the file specified as "copert_table" in
	 * the input configuration file and the {@link #random} instance defined in this class. 
	 * The loaded parser is then accessible from the
	 * {@link #getCopertParser()} function.
	 * 
	 * @param context current context, used to load the current configuration
	 * @return loaded CopertParser
	 */
	protected CopertParser loadParser(SmartGovContext context) {
		copertParser = new CopertParser(context.getFileLoader().load("copert_table"), random);
		return copertParser;
	}
	
	public abstract void reloadWorld(SmartGovContext context);
	
	/**
	 * Returns the currently loaded CopertParser.
	 * 
	 * @return current CopertParser
	 */
	public CopertParser getCopertParser() {
		return copertParser;
	}
		
}
